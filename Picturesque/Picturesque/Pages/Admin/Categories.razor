@page "/categories"
@using System.Net.Http.Headers;
@using Picturesque.Models.Constants;
@inject HttpClient Http;
@inject TokenAuthenticationStateProvider TokenProvider;
@inject NavigationManager UriHelper;
@attribute [Authorize]

<h1>Categories</h1>

@if (categories == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row justify-content-end mr-3 mt-4">
        <MatButton Outlined="true" @onclick="OnAddCategory">
            @(addingCategory ? "Cancel" : "Add new category")
        </MatButton>
    </div>
    @if (addingCategory)
    {
        <EditForm Model="category" OnValidSubmit="AddCategory" class="mt-2 mb-2">
            <DataAnnotationsValidator />

            <div class="form-group">
                <MatTextField Class="w-100"
                              Required="true"
                              Label="Category Name"
                              Outlined="true"
                              @bind-Value="category.Name">
                </MatTextField>
                <ValidationMessage For="@(() => category)"></ValidationMessage>
            </div>
            <p class="text-danger">@errorMessage</p>
            <MatButton Type="submit" Class="mt-2 w-100" Outlined="true">Create Category</MatButton>
        </EditForm>
    }
    @if (editingCategory)
    {
        <EditForm Model="category" OnValidSubmit="EditCategory" class="mt-2 mb-2">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <MatTextField Class="w-100"
                              Required="true"
                              Label="Category Name"
                              Outlined="true"
                              @bind-Value="category.Name">
                </MatTextField>
            </div>
            <p class="text-danger">@errorMessage</p>
            <MatButton Type="submit" Class="mt-2 w-100" Outlined="true">Edit Category</MatButton>
        </EditForm>
    }
    <MatTable Items="@categories"
              LoadInitialData="true"
              FilterByColumnName="Name"
              DebounceMilliseconds="150">
        <MatTableHeader>
            <th>Id</th>
            <th>Name</th>
            <th>Actions</th>
        </MatTableHeader>
        <MatTableRow>
            <td>@context.Id</td>
            <td>@context.Name</td>
            <td>
                <button class="btn btn-primary" @onclick="() => OnEditCategory(context.Id)">
                    Edit
                </button>
                <button class="btn btn-outline-danger" @onclick="() => DeleteCategory(context.Id)">
                    Delete
                </button>
            </td>
        </MatTableRow>
    </MatTable>
}

@code {
    private Category[] categories;
    private Category category = new Category();
    private bool addingCategory = false;
    private bool editingCategory = false;
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        var token = await TokenProvider.GetTokenAsync();
        var isAdmin = (await TokenProvider.GetAuthenticationStateAsync())
            .User
            .Claims
            .FirstOrDefault(c => c.Type.ToString() == "is_admin")?.Value == "True";

        if (token != null && isAdmin)
        {
            try
            {
                Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
                categories = await Http.GetJsonAsync<Category[]>(ApiConstants.ApiUrl + "Category");
            }
            catch (Exception ex)
            {
                if (ex.Message.Contains("401"))
                {
                    await TokenProvider.SetTokenAsync(null);
                }
            }
        }
        else
        {
            UriHelper.NavigateTo("startgame");
        }
    }

    protected void OnAddCategory()
    {
        addingCategory = !addingCategory;
        errorMessage = string.Empty;
        editingCategory = false;
        category = new Category();
    }

    protected void OnEditCategory(string categoryId)
    {
        editingCategory = !editingCategory;
        addingCategory = false;
        category = categories.FirstOrDefault(c => c.Id == categoryId);
    }

    protected async Task AddCategory()
    {
        try
        {
            await Http.PostJsonAsync(ApiConstants.ApiUrl + "Category/CreateCategory", category);
            categories = null;
            categories = await Http.GetJsonAsync<Category[]>(ApiConstants.ApiUrl + "Category");
            addingCategory = false;
            category = new Category();
        }
        catch (Exception ex)
        {
            if (ex.Message.Contains("400"))
            {
                errorMessage = "Category already exists";
            }
        }

    }

    protected async Task EditCategory()
    {
        try
        {
            await Http.PostJsonAsync(ApiConstants.ApiUrl + "Category/UpdateCategory", category);
            categories = null;
            categories = await Http.GetJsonAsync<Category[]>(ApiConstants.ApiUrl + "Category");
            editingCategory = false;
            category = new Category();
        }
        catch (Exception ex)
        {
            if (ex.Message.Contains("400"))
            {
                errorMessage = "Category already exists";
            }
        }

    }

    protected async Task DeleteCategory(string categoryId)
    {
        category = categories.FirstOrDefault(c => c.Id == categoryId);
        categories =
            await Http.PostJsonAsync<Category[]>(ApiConstants.ApiUrl + "Category/DeleteCategory", category);
        category = new Category();
    }
}
