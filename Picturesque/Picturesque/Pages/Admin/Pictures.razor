@page "/pictures"
@inherits PictureComponent;
@using System.Net.Http.Headers;
@using Picturesque.Models.Constants;
@inject HttpClient Http;
@inject TokenAuthenticationStateProvider TokenProvider;
@inject NavigationManager UriHelper;
@inject IFileReaderService fileReaderService;
@attribute [Authorize]

@if (pictures == null)
{
    <div class="row justify-content-end">
        <div class="col-md-6">
            <MatProgressCircle Indeterminate="true" Size="MatProgressCircleSize.Large" />
        </div>
    </div>
}
else
{
    <MatH2>Pictures</MatH2>
    <div class="row justify-content-end mr-3 mt-4">
        <MatButton Outlined="true" @onclick="OnAddPicture">
            @(addingPicture ? "Cancel" : "Add new picture")
        </MatButton>
    </div>
    @if (addingPicture)
    {
        <div class="row mt-2">
            <div class="col-md-6">
                <input class="form-control" type="file" multiple @ref=inputTypeFileElement />
            </div>
            <div class="col-md-6">
                <MatButton Outlined="true" @onclick=UploadFiles>Upload files</MatButton>
            </div>
        </div>
    }
    @if (editingPicture)
    {
        <EditForm Model="picture" OnValidSubmit="AddCategoryToPicture">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group row mt-4">
                <MatSelect Label="Select Category" Outlined="true" @bind-Value="picture.CategoryId">
                    @foreach (var category in categories)
                            {
                        <MatOption Value="@category.Id">@category.Name</MatOption>
                            }
                </MatSelect>
            </div>
            <div class="form-group row">
                <MatButton Type="submit" Class="w-100" Outlined="true">Add Category</MatButton>
            </div>
        </EditForm>
    }
    <div class="row mt-2">
        @foreach (var picture in pictures)
        {
            <MatCard Class="m-2">
                <MatCardMedia Square="true" ImageUrl="@picture.Img2Base64" />
                <div class="text-center">
                    <MatBody2>Category: @picture.CategoryName</MatBody2>
                </div>
                <MatCardActions>
                    <MatButton @onclick="() => OnEditPicture(picture.Id)">Edit</MatButton>
                    <button class="btn btn-outline-danger"
                            @onclick="() => DeletePicture(picture.Id)">
                        Delete
                    </button>
                </MatCardActions>
            </MatCard>
        }
    </div>
}

@code {
    ElementReference inputTypeFileElement;
    IFileReaderRef fileReaderReference;

    protected override async Task OnInitializedAsync()
    {
        token = await TokenProvider.GetTokenAsync();
        var isAdmin = (await TokenProvider.GetAuthenticationStateAsync())
            .User
            .Claims
            .FirstOrDefault(c => c.Type.ToString() == "is_admin")?.Value == "True";

        if (token != null && isAdmin)
        {
            try
            {
                client = new HttpClient();
                await GetPicturesAndCategories();
            }
            catch (Exception ex)
            {
                if (ex.Message.Contains("401"))
                {
                    await TokenProvider.SetTokenAsync(null);
                }
            }
        }
        else
        {
            UriHelper.NavigateTo("startgame");
        }
    }

    protected override void OnAfterRender(bool isFirstRender)
    {
        fileReaderReference = fileReaderService.CreateReference(inputTypeFileElement);
    }

    protected async Task UploadFiles()
    {
        var multipartFormDataContent = new MultipartFormDataContent();
        foreach (var file in await fileReaderReference.EnumerateFilesAsync())
        {
            multipartFormDataContent.Add(
                new StreamContent(await file.OpenReadAsync(), 8192),
                "files",
                (await file.ReadFileInfoAsync()).Name);
        }

        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        var res = await Http.PostAsync(ApiConstants.ApiUrl + "Picture/UploadPictures",
            content: multipartFormDataContent);
        pictures = await GetPictures();
    }
}
