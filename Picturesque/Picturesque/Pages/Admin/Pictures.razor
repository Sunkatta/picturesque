@page "/pictures"
@using System.Net.Http.Headers;
@inject HttpClient Http
@inject TokenAuthenticationStateProvider TokenProvider
@inject IFileReaderService fileReaderService
@attribute [Authorize]

<h3>Pictures</h3>

@if (pictures == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row justify-content-end mr-3 mt-4">
        <button class="btn btn-primary"
                @onclick="OnAddPicture">
            Add new picture
        </button>
    </div>
    @if (addingPicture)
    {
        <input class="form-control" type="file" multiple @ref=inputTypeFileElement />
        <button class="btn btn-outline-success mt-2 w-100" @onclick=UploadFiles>Upload files</button>
    }
    @if (editingPicture)
    {
        <EditForm Model="picture" OnValidSubmit="AddCategoryToPicture">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group col-md-4">
                <label>Select Category</label>
                <InputSelect class="form-control" @bind-Value="picture.CategoryId">
                    <option value="" selected>--</option>
                    @foreach (var category in categories)
                            {
                        <option value="@category.Id">@category.Name</option>
                            }
                    /**/
                    /**/
                </InputSelect>
            </div>
            <button type="submit" class="btn btn-outline-success mt-2 w-100">Add Category</button>
        </EditForm>
    }
    <div class="row">
        @foreach (var picture in pictures)
        {
            <div class="col-md-3" style="border: 1px solid black; padding: 0">
                <img class="img" src="@picture.Img2Base64" />
                <p>@picture.CategoryName</p>
                <button class="btn btn-primary" @onclick="() => OnEditPicture(picture.Id)">Edit</button>
                <button class="btn btn-outline-danger"
                        @onclick="() => DeletePicture(picture.Id)">
                    Delete
                </button>
            </div>
        }
    </div>
}

@code {
    private Picture[] pictures;
    private Picture picture = new Picture();
    private Category[] categories;
    private bool addingPicture = false;
    private bool editingPicture = false;
    ElementReference inputTypeFileElement;
    IFileReaderRef fileReaderReference;

    protected override async Task OnInitializedAsync()
    {
        var token = await TokenProvider.GetTokenAsync();
        if (token != null)
        {
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
            pictures = await Http.GetJsonAsync<Picture[]>("https://localhost:44317/api/Picture");
            categories = await Http.GetJsonAsync<Category[]>("https://localhost:44317/api/Category");
        }
    }

    protected override void OnAfterRender(bool isFirstRender)
    {
        fileReaderReference = fileReaderService.CreateReference(inputTypeFileElement);
    }

    protected void OnAddPicture()
    {
        addingPicture = !addingPicture;
        editingPicture = false;
    }

    protected void OnEditPicture(string pictureId)
    {
        editingPicture = !editingPicture;
        picture = pictures.FirstOrDefault(c => c.Id == pictureId);
    }

    protected async Task UploadFiles()
    {
        var multipartFormDataContent = new MultipartFormDataContent();
        foreach (var file in await fileReaderReference.EnumerateFilesAsync())
        {
            multipartFormDataContent.Add(
                new StreamContent(await file.OpenReadAsync(), 8192),
                "files",
                (await file.ReadFileInfoAsync()).Name);
        }

        var res = await Http.PostAsync("https://localhost:44317/api/Picture/UploadPictures",
                content: multipartFormDataContent);
        pictures = await Http.GetJsonAsync<Picture[]>("https://localhost:44317/api/Picture");
    }

    protected async Task AddCategoryToPicture()
    {
        await Http.PostJsonAsync("https://localhost:44317/api/Picture/UpdatePictureCategory", picture);
        pictures = null;
        pictures = await Http.GetJsonAsync<Picture[]>("https://localhost:44317/api/Picture");
        editingPicture = false;
        picture = new Picture();
    }

    protected async Task DeletePicture(string pictureId)
    {
        picture = pictures.FirstOrDefault(c => c.Id == pictureId);
        pictures =
            await Http.PostJsonAsync<Picture[]>("https://localhost:44317/api/Picture/DeletePicture", picture);
        picture = new Picture();
    }
}
