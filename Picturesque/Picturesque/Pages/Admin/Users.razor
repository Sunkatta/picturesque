@page "/users"
@inject HttpClient Http;
@inject TokenAuthenticationStateProvider TokenProvider;
@inject NavigationManager UriHelper;
@attribute [Authorize]
@inherits UserComponent;

<h1>Users</h1>

@if (users == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <MatTable Items="users"
              LoadInitialData="true"
              FilterByColumnName="Email"
              DebounceMilliseconds="150">
        <MatTableHeader>
            <th style="width: 60%;">Id</th>
            <th>Email</th>
            <th>Username</th>
            <th>Blocked</th>
            <th>Admin</th>
            <th>Actions</th>
        </MatTableHeader>
        <MatTableRow>
            <td>@context.Id</td>
            <td>@context.Email</td>
            <td>@context.Username</td>
            <td>@(context.IsBlocked ? "Yes" : "No")</td>
            <td>@(context.IsAdmin ? "Yes": "No")</td>
            <td>
                <button class="btn btn-outline-danger" @onclick="() => BlockUser(context.Id)">
                    @(context.IsBlocked ? "Unblock" : "Block")
                </button>
            </td>
        </MatTableRow>
    </MatTable>
}

@code {
    protected override async Task OnInitializedAsync()
    {
        token = await TokenProvider.GetTokenAsync();
        var isAdmin = (await TokenProvider.GetAuthenticationStateAsync())
            .User
            .Claims
            .FirstOrDefault(c => c.Type.ToString() == "is_admin")?.Value == "True";

        if (token != null && isAdmin)
        {
            try
            {
                client = new HttpClient();
                await GetUsers();
            }
            catch (Exception ex)
            {
                if (ex.Message.Contains("401"))
                {
                    await TokenProvider.SetTokenAsync(null);
                }
            }

        }
        else
        {
            UriHelper.NavigateTo("startgame");
        }
    }
}