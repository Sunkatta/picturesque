@page "/Account/ResetPassword";
@using Microsoft.AspNetCore.WebUtilities;
@using Picturesque.Models.Constants; 
@inject NavigationManager NavigationManager
@inject HttpClient client;

<div class="login-register-holder">
    @if (loading)
    {
        <p>Please wait...</p>
    }
    else if (!isLinkValid)
    {
        <h3 class="text-center">@errorMessage</h3>
    }
    else
    {
        if (!isPasswordReset)
        {
            <h3 class="text-center">Reset Password</h3>
            <div class="form-holder">
                <EditForm Model="@resetPasswordInputModel" OnValidSubmit="@HandleResetPassword">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <p class="text-danger text-center">@errorMessage</p>

                    <input type="hidden" @bind-value="resetPasswordInputModel.Email" />
                    <input type="hidden" @bind-value="resetPasswordInputModel.PasswordResetCode" />
                    <div class="form-group">
                        <label for="password">New Password</label>
                        <input type="password" class="form-control" name="password" @bind-value="resetPasswordInputModel.Password" />
                    </div>
                    <div class="form-group">
                        <label for="confirmPass">Confirm Password</label>
                        <input type="password" class="form-control" name="confirmPass" @bind-value="resetPasswordInputModel.ConfirmPassword" />
                    </div>
                    <div class="text-center">
                        <button type="submit" class="btn btn-outline-success mt-2 w-100">Reset Password</button>
                    </div>

                </EditForm>
            </div>
        }
        else
        {
            <div class="form-holder text-center">
                <h3>Password changed successfully!</h3>
                <button class="btn btn-outline-success mt-2 w-100" @onclick="@((e) => NavigationManager.NavigateTo("login"))">
                    To Login
                </button>
            </div>
        }
    }
</div>

@code {
    [Parameter]
    public string Email { get; set; }

    [Parameter]
    public string PasswordResetCode { get; set; }

    bool loading = false;
    bool isPasswordReset = false;
    bool isLinkValid = true;
    string errorMessage;

    ResetPasswordInputModel resetPasswordInputModel = new ResetPasswordInputModel();

    protected override void OnInitialized()
    {
        loading = true;
        var query = new Uri(NavigationManager.Uri).Query;

        if (QueryHelpers.ParseQuery(query).TryGetValue("email", out var email))
        {
            Email = email;
            resetPasswordInputModel.Email = Email;
        }

        if (QueryHelpers.ParseQuery(query).TryGetValue("passwordResetKey", out var emailConfirmationKey))
        {
            PasswordResetCode = emailConfirmationKey;
            resetPasswordInputModel.PasswordResetCode = PasswordResetCode;
        }

        if (string.IsNullOrEmpty(Email) || string.IsNullOrEmpty(PasswordResetCode))
        {
            errorMessage = "Invalid or expired link!";
            isLinkValid = false;
        }

        loading = false;
        StateHasChanged();
    }

    protected async Task HandleResetPassword()
    {
        if (!string.IsNullOrEmpty(Email) && !string.IsNullOrEmpty(PasswordResetCode))
        {
            errorMessage = string.Empty;
            StateHasChanged();

            isPasswordReset = await client.PostJsonAsync<bool>(ApiConstants.ApiUrl + "Account/ResetPassword", resetPasswordInputModel);

            if (!isPasswordReset)
            {
                errorMessage = "There was an error while attempting to reset your password.";
                StateHasChanged();
            }
        }
    }
}
