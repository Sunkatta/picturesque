@page "/Account/ResetPassword";
@using Microsoft.AspNetCore.WebUtilities;
@using Picturesque.Models.Constants; 
@inject NavigationManager NavigationManager
@inject HttpClient client;

<div class="login-register-holder">
    @if (loading)
    {
        <p>Please wait...</p>
    }
    else if (!isLinkValid)
    {
        <MatH4 Class="identity-text-color text-center">@errorMessage</MatH4>
    }
    else
    {
        if (!isPasswordReset)
        {
            <MatH4 Class="identity-text-color mb-3 text-center">Reset Password</MatH4>
            <div class="form-holder">
                <EditForm Model="@resetPasswordInputModel" OnValidSubmit="@HandleResetPassword">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <p class="text-danger text-center">@errorMessage</p>

                    <input type="hidden" @bind-value="resetPasswordInputModel.Email" />
                    <input type="hidden" @bind-value="resetPasswordInputModel.PasswordResetCode" />
                    <div class="form-group">
                        <MatTextField Class="w-100"
                                      Type="password"
                                      Required="true"
                                      Label="New Password"
                                      Outlined="true"
                                      HelperText="Should be at least 6 characters long"
                                      Icon="lock_outline"
                                      IconTrailing="true"
                                      @bind-Value="resetPasswordInputModel.Password" />
                    </div>
                    <div class="form-group">
                        <MatTextField Class="w-100"
                                      Type="password"
                                      Required="true"
                                      Label="Confirm Password"
                                      Outlined="true"
                                      Icon="lock_outline"
                                      IconTrailing="true"
                                      @bind-Value="resetPasswordInputModel.ConfirmPassword" />
                    </div>
                    <div class="text-center">
                        <MatButton type="submit" Class="mt-2 w-100" Outlined="true">Reset Password</MatButton>
                    </div>

                </EditForm>
            </div>
        }
        else
        {
            <div class="form-holder text-center">
                <MatH5 Class="identity-text-color mb-3">Password changed successfully!</MatH5>
                <MatButton Class="mt-2 w-100" Link="login" Outlined="true">
                    To Login
                </MatButton>
            </div>
        }
    }
</div>

@code {
    [Parameter]
    public string Email { get; set; }

    [Parameter]
    public string PasswordResetCode { get; set; }

    bool loading = false;
    bool isPasswordReset = false;
    bool isLinkValid = true;
    string errorMessage;

    ResetPasswordInputModel resetPasswordInputModel = new ResetPasswordInputModel();

    protected override void OnInitialized()
    {
        loading = true;
        var query = new Uri(NavigationManager.Uri).Query;

        if (QueryHelpers.ParseQuery(query).TryGetValue("email", out var email))
        {
            Email = email;
            resetPasswordInputModel.Email = Email;
        }

        if (QueryHelpers.ParseQuery(query).TryGetValue("passwordResetKey", out var emailConfirmationKey))
        {
            PasswordResetCode = emailConfirmationKey;
            resetPasswordInputModel.PasswordResetCode = PasswordResetCode;
        }

        if (string.IsNullOrEmpty(Email) || string.IsNullOrEmpty(PasswordResetCode))
        {
            errorMessage = "Invalid or expired link!";
            isLinkValid = false;
        }

        loading = false;
        StateHasChanged();
    }

    protected async Task HandleResetPassword()
    {
        if (!string.IsNullOrEmpty(Email) && !string.IsNullOrEmpty(PasswordResetCode))
        {
            errorMessage = string.Empty;
            StateHasChanged();

            isPasswordReset = await client.PostJsonAsync<bool>(ApiConstants.ApiUrl + "Account/ResetPassword", resetPasswordInputModel);

            if (!isPasswordReset)
            {
                errorMessage = "There was an error while attempting to reset your password.";
                StateHasChanged();
            }
        }
    }
}
