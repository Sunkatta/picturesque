@inherits UserStatisticsComponent;
@using System.Globalization;
@inject TokenAuthenticationStateProvider TokenProvider;

@if (loading)
{
    <div class="row justify-content-end mt-4">
        <div class="col-md-6">
            <MatProgressCircle Indeterminate="true" Size="MatProgressCircleSize.Large" />
        </div>
    </div>
}
else
{
    if (userStatistics == null)
    {
        <div class="mt-4">
            <MatH5 Class="text-center">We could not find any statistics for this profile. Go ahead and play some games.</MatH5>
        </div>
    }
    else
    {
        <div class="row m-4">
            <div class="col-md-3">
                <MatCard>
                    <MatCardContent>
                        <div class="m-4 text-center">
                            <MatH3>
                                @(string.Format("{0:0.00%}", (double)userStatistics.GamesWon / (userStatistics.GamesWon + userStatistics.GamesLost)))
                            </MatH3>
                            <MatH5>Win Rate</MatH5>
                        </div>
                    </MatCardContent>
                </MatCard>
            </div>
            <div class="col-md-3">
                <MatCard>
                    <MatCardContent>
                        <div class="m-4 text-center">
                            <MatH3>
                                @userStatistics.TotalScore
                            </MatH3>
                            <MatH5>Total Score</MatH5>
                        </div>
                    </MatCardContent>
                </MatCard>
            </div>
            <div class="col-md-3">
                <MatCard>
                    <MatCardContent>
                        <div class="m-4 text-center">
                            <MatH3>
                                @userStatistics.TotalNumberOfMistakes
                            </MatH3>
                            <MatH5>Mistakes Made</MatH5>
                        </div>
                    </MatCardContent>
                </MatCard>
            </div>
            <div class="col-md-3">
                <MatCard>
                    <MatCardContent>
                        <div class="m-4 text-center">
                            <MatH3>
                                @(TimeSpan.FromSeconds(userStatistics.TotalPlaytime).ToString(@"hh\:mm\:ss"))
                            </MatH3>
                            <MatH5>Playtime</MatH5>
                        </div>
                    </MatCardContent>
                </MatCard>
            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                <LineChart Style="width: 50%; height: auto;" @ref="@lineChart" TItem="int" />
            </div>
        </div>
    }
}

@code {
    LineChart<int> lineChart;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (lineChart != null)
        {
            await HandleRedraw();
        }
    }

    async Task HandleRedraw()
    {
        await lineChart.Clear();

        await lineChart.AddLabelsDatasetsAndUpdate(Labels, GetLineChartDataset());
    }

    LineChartDataset<int> GetLineChartDataset()
    {
        return new LineChartDataset<int>
        {
            Label = "Daily Score Of All Won Games In The Past Week",
            Data = userStatistics.DailyWonGamesScore,
            BackgroundColor = backgroundColors,
            BorderColor = borderColors,
            Fill = true,
            PointRadius = 2,
            BorderDash = new List<int> { }
        };
    }

    string[] Labels = { "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun" };
    List<string> backgroundColors = new List<string> { ChartColor.FromRgba(255, 99, 132, 0.2f), ChartColor.FromRgba(54, 162, 235, 0.2f), ChartColor.FromRgba(255, 206, 86, 0.2f), ChartColor.FromRgba(75, 192, 192, 0.2f), ChartColor.FromRgba(153, 102, 255, 0.2f), ChartColor.FromRgba(255, 159, 64, 0.2f) };
    List<string> borderColors = new List<string> { ChartColor.FromRgba(255, 99, 132, 1f), ChartColor.FromRgba(54, 162, 235, 1f), ChartColor.FromRgba(255, 206, 86, 1f), ChartColor.FromRgba(75, 192, 192, 1f), ChartColor.FromRgba(153, 102, 255, 1f), ChartColor.FromRgba(255, 159, 64, 1f) };

    List<int> RandomizeData()
    {
        var r = new Random(DateTime.Now.Millisecond);

        return new List<int> { r.Next(3, 50) * r.Next(), r.Next(3, 50) * r.Next(), r.Next(3, 50) * r.Next(), r.Next(3, 50) * r.Next(), r.Next(3, 50) * r.Next(), r.Next(3, 50) * r.Next(), r.Next(3, 50) * r.Next() };
    }

    protected override async Task OnInitializedAsync()
    {
        loading = true;
        token = await TokenProvider.GetTokenAsync();
        string id = (await TokenProvider.GetAuthenticationStateAsync())
            .User
            .Claims
            .FirstOrDefault(c => c.Type.ToString() == "sub")?.Value;

        if (!string.IsNullOrEmpty(id))
        {
            httpClient = new HttpClient();
            await GetUserStatistics(id);
        }

        loading = false;
    }
} 