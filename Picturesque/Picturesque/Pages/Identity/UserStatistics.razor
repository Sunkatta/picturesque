@inherits UserStatisticsComponent;
@inject TokenAuthenticationStateProvider TokenProvider;
@inject NavigationManager UriHelper; 

@if (loading)
{
    <div class="row justify-content-end mt-4">
        <div class="col-md-6">
            <MatProgressCircle Indeterminate="true" Size="MatProgressCircleSize.Large" />
        </div>
    </div>
}
else
{
    if (userStatistics == null)
    {
        <div class="mt-4">
            <MatH5 Class="text-center">We could not find any statistics for this profile. Go ahead and play some games.</MatH5>
        </div>
    }
    else
    {
        <div class="row m-4">
            <div class="col-md-3">
                <MatCard>
                    <MatCardContent>
                        <div class="m-4 text-center">
                            <MatH5>
                                @(string.Format("{0:0.00%}", (double)userStatistics.GamesWon / (userStatistics.GamesWon + userStatistics.GamesLost)))
                            </MatH5>
                            <MatH6>Win Rate</MatH6>
                        </div>
                    </MatCardContent>
                </MatCard>
            </div>
            <div class="col-md-3">
                <MatCard>
                    <MatCardContent>
                        <div class="m-4 text-center">
                            <MatH5>
                                @userStatistics.TotalScore
                            </MatH5>
                            <MatH6>Total Score</MatH6>
                        </div>
                    </MatCardContent>
                </MatCard>
            </div>
            <div class="col-md-3">
                <MatCard>
                    <MatCardContent>
                        <div class="m-4 text-center">
                            <MatH5>
                                @userStatistics.TotalNumberOfMistakes
                            </MatH5>
                            <MatH6>Mistakes Made</MatH6>
                        </div>
                    </MatCardContent>
                </MatCard>
            </div>
            <div class="col-md-3">
                <MatCard>
                    <MatCardContent>
                        <div class="m-4 text-center">
                            <MatH5>
                                @(TimeSpan.FromSeconds(userStatistics.TotalPlaytime).ToString(@"hh\:mm\:ss"))
                            </MatH5>
                            <MatH6>Playtime</MatH6>
                        </div>
                    </MatCardContent>
                </MatCard>
            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                <LineChart Style="width: 50%; height: auto;" @ref="@lineChart" TItem="int" />
            </div>
        </div>
    }
}

@code {
    protected override async Task OnInitializedAsync()
    {
        loading = true;
        token = await TokenProvider.GetTokenAsync();
        string id = (await TokenProvider.GetAuthenticationStateAsync())
            .User
            .Claims
            .FirstOrDefault(c => c.Type.ToString() == "sub")?.Value;

        if (!string.IsNullOrEmpty(id))
        {
            try
            {
                httpClient = new HttpClient();
                await GetUserStatistics(id);
            }
            catch (Exception ex)
            {
                if (ex.Message.Contains("401"))
                {
                    await TokenProvider.SetTokenAsync(null);
                }
            }

        }
        else
        {
            UriHelper.NavigateTo("startgame");
        }

        loading = false;
    }
} 