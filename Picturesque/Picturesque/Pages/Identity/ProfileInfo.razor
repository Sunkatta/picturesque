@inherits ProfileInfoComponent;
@using Picturesque.Models.Constants;
@using System.IO;
@using System.Net.Http.Headers;
@using Newtonsoft.Json; 
@inject TokenAuthenticationStateProvider TokenProvider;
@inject NavigationManager UriHelper;

@if (profile == null)
{
    <div class="row justify-content-end mt-4">
        <div class="col-md-6">
            <MatProgressCircle Indeterminate="true" Size="MatProgressCircleSize.Large" />
        </div>
    </div>
}
else
{
    <div class="mt-4">
        <MatH4 Class="text-center">@username's Personal Profile</MatH4>
    </div>
    <MatDivider></MatDivider>
    <div class="row m-4">
        <div class="col-md-6">
            <img src="@profile.ProfilePic" class="img-thumbnail" width="300" />
            <MatFileUpload OnChange="@FilesReady" Class="mt-2 mb-2" Style="width: 300px; height: 50px;" Label="Change Profile Picture"></MatFileUpload>
        </div>
        <div class="col-md-6">
            <EditForm Model="profile" OnValidSubmit="HandleProfileUpdate">
                <DataAnnotationsValidator></DataAnnotationsValidator>

                <div class="form-group">
                    <MatTextField Class="w-100"
                                  Required="true"
                                  Label="Username"
                                  Outlined="true"
                                  @bind-Value="@profile.Username">
                    </MatTextField>
                </div>
                <div class="form-group">
                    <MatTextField Class="w-100"
                                  Label="First Name"
                                  Outlined="true"
                                  @bind-Value="@profile.FirstName">
                    </MatTextField>
                </div>
                <div class="form-group">
                    <MatTextField Class="w-100"
                                  Label="Last Name"
                                  Outlined="true"
                                  @bind-Value="@profile.LastName">
                    </MatTextField>
                </div>
                <div class="form-group">
                    <MatTextField Class="w-100"
                                  Required="true"
                                  Label="Email"
                                  Outlined="true"
                                  Disabled="true"
                                  @bind-Value="@profile.Email">
                    </MatTextField>
                </div>
                <div class="form-group">
                    <MatDatePicker Class="w-100"
                                   Required="true"
                                   Label="Member Since"
                                   Outlined="true"
                                   Disabled="true"
                                   Format="dd MMM yyyy"
                                   @bind-Value="@profile.CreatedOn">
                    </MatDatePicker>
                </div>
                <div class="form-group">
                    <MatButton Type="submit" Class="w-100" Outlined="true">Update Profile</MatButton>
                </div>
                <div class="form-group">
                    <MatButton Outlined="true" Class="w-100" Label="Change Password" OnClick="SendForgotPasswordEmail"></MatButton>
                    <MatSnackbar @bind-IsOpen="@hasEmailBeenSent">
                        <MatSnackbarContent>Reset password email has been sent to @profile.Email.</MatSnackbarContent>
                        <MatSnackbarActions>
                            <MatIconButton Icon="close" Class="text-white" OnClick="@(() => hasEmailBeenSent = false)"></MatIconButton>
                        </MatSnackbarActions>
                    </MatSnackbar>
                </div>
            </EditForm>
        </div>
    </div>
}

@code {
    protected override async Task OnInitializedAsync()
    {
        token = await TokenProvider.GetTokenAsync();
        id = (await TokenProvider.GetAuthenticationStateAsync())
            .User
            .Claims
            .FirstOrDefault(c => c.Type.ToString() == "sub")?.Value;

        if (!string.IsNullOrEmpty(id) && !string.IsNullOrEmpty(token))
        {
            try
            {
                httpClient = new HttpClient();
                await GetProfile();
            }
            catch (Exception ex)
            {
                if (ex.Message.Contains("401"))
                {
                    await TokenProvider.SetTokenAsync(null);
                }
            }

        }
        else
        {
            UriHelper.NavigateTo("startgame");
        }
    }

    protected async void FilesReady(IMatFileUploadEntry[] files)
    {
        var file = files.FirstOrDefault();

        if (file == null)
        {
            return;
        }

        if (file.Type == "image/png" || file.Type == "image/jpeg")
        {
            var multipartFormDataContent = new MultipartFormDataContent();
            using (var stream = new MemoryStream())
            {
                await file.WriteToStreamAsync(stream);
                stream.Position = 0;
                multipartFormDataContent.Add(
                    new StreamContent(stream, 8192),
                    "files",
                    file.Name);

                httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
                var res = await httpClient.PostAsync(ApiConstants.ApiUrl + "Account/ChangeProfilePicture",
                    content: multipartFormDataContent);

                if (res.IsSuccessStatusCode)
                {
                    ProfilePicture newProfilePic = JsonConvert.DeserializeObject<ProfilePicture>(await res.Content.ReadAsStringAsync());
                    profile.ProfilePic = newProfilePic.Image2Base64;
                    StateHasChanged();
                }
            }
        }
    }
}
