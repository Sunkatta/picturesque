@inherits ProfileInfoComponent;
@inject TokenAuthenticationStateProvider TokenProvider;
@inject NavigationManager UriHelper;

@if (profile == null)
{
    <div class="row justify-content-end mt-4">
        <div class="col-md-6">
            <MatProgressCircle Indeterminate="true" Size="MatProgressCircleSize.Large" />
        </div>
    </div>
}
else
{
    <div class="mt-4">
        <MatH4 Class="text-center">@profile.Username's Profile</MatH4>
    </div>
    <MatDivider></MatDivider>
    <div class="row mt-4">
        <div class="col-md-6">
            <img src="@profile.ProfilePic" class="img-thumbnail" />
            <MatFileUpload OnChange="@FilesReady" Class="mt-2 mb-2" Style="width: 370px;" Label="Change Profile Picture"></MatFileUpload>
        </div>
        <div class="col-md-6">
            <div class="row">
                <MatH6 Class="col-md-6">Username: </MatH6>
                <MatBody1 Class="col-md-6">@profile.Username</MatBody1>
            </div>
            <div class="row">
                <MatH6 Class="col-md-6">Email: </MatH6>
                <MatBody1 Class="col-md-6">@profile.Email</MatBody1>
            </div>
            <div class="row">
                <MatH6 Class="col-md-6">Member Since: </MatH6>
                <MatBody1 Class="col-md-6">@profile.CreatedOn.ToLocalTime()</MatBody1>
            </div>
        </div>
    </div>
}

@code {
    protected override async Task OnInitializedAsync()
    {
        token = await TokenProvider.GetTokenAsync();
        string id = (await TokenProvider.GetAuthenticationStateAsync())
            .User
            .Claims
            .FirstOrDefault(c => c.Type.ToString() == "sub")?.Value;

        if (!string.IsNullOrEmpty(id) && !string.IsNullOrEmpty(token))
        {
            try
            {
                httpClient = new HttpClient();
                await GetProfile(id);
            }
            catch (Exception ex)
            {
                if (ex.Message.Contains("401"))
                {
                    await TokenProvider.SetTokenAsync(null);
                }
            }

        }
        else
        {
            UriHelper.NavigateTo("startgame");
        }
    }

    List<string> list = new List<string>();

    void FilesReady(IMatFileUploadEntry[] files)
    {
        foreach (var file in files)
        {
            list.Add($"Name: {file.Name} - Size: {file.Size}");
        }
    }
}
