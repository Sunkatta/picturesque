@page  "/login"
@using Picturesque.Models.Constants;
@inject HttpClient client;
@inject TokenAuthenticationStateProvider authStateProvider;
@inject NavigationManager UriHelper;

<div class="login-register-holder">
    <div class="container">
        <h3 class="text-center">Login</h3>
        <div class="form-holder">
            <EditForm Model="@loginInputModel" OnValidSubmit="@HandleLogin">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <p class="text-danger text-center">@((MarkupString)errorMessage)</p>

                <div class="form-group">
                    <label for="email">Email</label>
                    <InputText id="email" class="form-control" @bind-Value="loginInputModel.Email"></InputText>
                </div>
                <div class="form-group">
                    <label for="password">Password</label>
                    <input type="password" class="form-control" name="password" @bind-value="loginInputModel.Password" />
                </div>
                <div class="row">
                    <div class="col-md-6">
                        <NavLink class="ml-md-auto" href="Account/ForgotPassword">
                            I forgot my password
                        </NavLink>
                    </div>
                    <div class="col-md-6 text-right">
                        <NavLink class="ml-md-auto" href="register">
                            Create an account
                        </NavLink>
                    </div>
                </div>
                <div class="text-center">
                    <button type="submit" class="btn btn-outline-success mt-2 w-100">Login</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code  {
    LoginInputModel loginInputModel = new LoginInputModel();
    string token;
    string errorMessage;

    protected async Task HandleLogin()
    {
        try
        {
            token = await client.PostJsonAsync<string>(ApiConstants.ApiUrl + "Account/Login", loginInputModel);

            if (token != null)
            {
                await authStateProvider.SetTokenAsync(token);
                UriHelper.NavigateTo("startgame");
            }
        }
        catch (Exception ex)
        {
            if (ex.Message.Contains("403"))
            {
                errorMessage = "Your account has been blocked.";
            }

            if (ex.Message.Contains("400"))
            {
                errorMessage = $"We found an account with this email but it has not been confirmed yet. Click <a href=\"Account/ResendEmail\">here</a> to resend a confirmation email to <b>{loginInputModel.Email}</b>.";
            }

            if (ex.Message.Contains("401"))
            {
                errorMessage = "We could not find an account matching this email/password.";
            }

            StateHasChanged();
        }

    }
}