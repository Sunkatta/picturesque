@page "/leaderboard"
@inherits LeaderboardComponent;
@inject TokenAuthenticationStateProvider TokenProvider
@attribute [Authorize]

@if (gameScores == null)
{
    <div class="row justify-content-end">
        <div class="col-md-6">
            <MatProgressCircle Indeterminate="true" Size="MatProgressCircleSize.Large" />
        </div>
    </div>
}
else
{
    <MatH2>@title</MatH2>
    <MatChipSet Filter="true">
        <MatChip Label="Show All Time Scores" IsCheckable="true" IsSelectedChanged="ShowAll"></MatChip>
    </MatChipSet>
    <MatTable Items="@filteredGameScores"
              LoadInitialData="true"
              FilterByColumnName="Difficulty"
              DebounceMilliseconds="150">
        <MatTableHeader>
            <th style="width: 25%;">Username</th>
            <th>Category</th>
            <th>Difficulty</th>
            <th>Score</th>
            <th>Mistakes</th>
            <th style="width: 10%;">Time</th>
            <th>Help Used</th>
        </MatTableHeader>
        <MatTableRow>
            <td>@context.Username</td>
            <td>@context.CategoryName</td>
            <td>@context.Difficulty.ToString()</td>
            <td>@context.Score</td>
            <td>@context.NumberOfMistakes</td>
            <td>@context.CompletedInSeconds sec.</td>
            <td>@(context.IsHelpUsed ? "Yes" : "No")</td>
        </MatTableRow>
    </MatTable>
}

@code {
    protected override async Task OnInitializedAsync()
    {
        token = await TokenProvider.GetTokenAsync();
        if (token != null)
        {
            try
            {
                await GetLeaderboard();
            }
            catch (Exception ex)
            {
                if (ex.Message.Contains("401"))
                {
                    await TokenProvider.SetTokenAsync(null);
                }
            }

        }
    }
}
