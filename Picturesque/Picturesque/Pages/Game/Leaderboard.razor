@page "/leaderboard"
@using System.Net.Http.Headers;
@using Picturesque.Models.Enums; 
@using Picturesque.Models.Constants; 
@inject HttpClient Http
@inject TokenAuthenticationStateProvider TokenProvider
@attribute [Authorize]

<h1>Leaderboard</h1>

@if (gameScores == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <MatTable Items="@gameScores"
              LoadInitialData="true"
              FilterByColumnName="Difficulty"
              DebounceMilliseconds="150">
        <MatTableHeader>
            <th>Username</th>
            <th>Category</th>
            <th>Difficulty</th>
            <th>Score</th>
        </MatTableHeader>
        <MatTableRow>
            <td>@context.Username</td>
            <td>@context.CategoryName</td>
            <td>@context.Difficulty.ToString()</td>
            <td>@context.Score</td>
        </MatTableRow>
    </MatTable>
}

@code {
    private GameScore[] gameScores;
    private Difficulty selectedDifficulty;

    protected override async Task OnInitializedAsync()
    {
        var token = await TokenProvider.GetTokenAsync();
        if (token != null)
        {
            try
            {
                Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
                gameScores = await Http.GetJsonAsync<GameScore[]>(ApiConstants.ApiUrl + "Statistics");
                selectedDifficulty = Difficulty.All;
            }
            catch (Exception ex)
            {
                if (ex.Message.Contains("401"))
                {
                    await TokenProvider.SetTokenAsync(null);
                }
            }
        }
    }
}
