@page "/leaderboard"
@using System.Net.Http.Headers;
@using Picturesque.Models.Enums; 
@using Picturesque.Models.Constants; 
@inject HttpClient Http
@inject TokenAuthenticationStateProvider TokenProvider
@attribute [Authorize]

<h1>Leaderboard</h1>

@if (gameScores == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Model="selectedDifficulty">
        <div class="form-group">
            <label for="difficulty">Filter by</label>
            <InputSelect class="form-control"
                         Value="selectedDifficulty"
                         ValueExpression="@(() => selectedDifficulty)" 
                         ValueChanged="@((Difficulty newValue) => OnDifficultyChanged(newValue))">
                @foreach (Difficulty difficulty in Enum.GetValues(typeof(Difficulty)))
                {
                    <option value="@difficulty">@difficulty</option>
                }
            </InputSelect>
        </div>
    </EditForm>

    <table class="table mt-3">
        <thead>
            <tr>
                <th>Username</th>
                <th>Category</th>
                <th>Difficulty</th>
                <th>Score</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var gameScore in filteredGameScores)
            {
                <tr>
                    <td>@gameScore.Username</td>
                    <td>@gameScore.CategoryName</td>
                    <td>@gameScore.Difficulty.ToString()</td>
                    <td>@gameScore.Score</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private GameScore[] gameScores;
    private GameScore[] filteredGameScores;
    private Difficulty selectedDifficulty;

    protected override async Task OnInitializedAsync()
    {
        var token = await TokenProvider.GetTokenAsync();
        if (token != null)
        {
            try
            {
                Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
                gameScores = await Http.GetJsonAsync<GameScore[]>(ApiConstants.ApiUrl + "Statistics");
                selectedDifficulty = Difficulty.All;
                filteredGameScores = gameScores;
            }
            catch (Exception ex)
            {
                if (ex.Message.Contains("401"))
                {
                    await TokenProvider.SetTokenAsync(null);
                }
            }
        }
    }

    protected void OnDifficultyChanged(Difficulty difficulty)
    {
        selectedDifficulty = difficulty;
        filteredGameScores = selectedDifficulty == Difficulty.All ? gameScores : gameScores.Where(c => c.Difficulty == difficulty).ToArray();
        StateHasChanged();
    }
}
