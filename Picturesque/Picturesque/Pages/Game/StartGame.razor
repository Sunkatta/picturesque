@page "/startgame"
@using Picturesque.Models.Constants;
@inject TokenAuthenticationStateProvider tokenProvider
@inherits StartGameComponent
@attribute [Authorize]

@if (gameOptions == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @if (!gameHasStarted)
    {
        <EditForm Model="@gameOptionsInputModel" OnValidSubmit="@StartGame">
            <DataAnnotationsValidator />
            <div class="row">
                <div class="form-group col-md-4">
                    <MatSelect Label="Select Category" Class="form-control mb-1" Outlined="true" @bind-Value="gameOptionsInputModel.Category">
                        <MatOption Value=""></MatOption>
                        @foreach (var category in gameOptions.Categories)
                        {
                            if (category.Name != "No Category")
                            {
                                <MatOption Value="@category.Id">@category.Name</MatOption>
                            }
                        }
                    </MatSelect>
                    <ValidationMessage For="@(() => gameOptionsInputModel.Category)"></ValidationMessage>
                </div>
                <div class="form-group col-md-4">
                    <MatSelect Label="Select Difficulty" Class="form-control mb-1" Outlined="true" @bind-Value="gameOptionsInputModel.Difficulty">
                        <MatOption Value=""></MatOption>
                        @foreach (var difficulty in gameOptions.Difficulties)
                        {
                            <MatOption Value="@difficulty">@difficulty</MatOption>
                        }
                    </MatSelect>
                    <ValidationMessage For="@(() => gameOptionsInputModel.Difficulty)"></ValidationMessage>
                </div>
                <div class="form-group text-center col-md-4">
                    <MatButton Type="submit" Class="mt-3 w-100" Outlined="true">Start Game</MatButton>
                </div>
            </div>
        </EditForm>
    }
    else
    {
        <div class="row text-center">
            <div class="col-md-4">
                <MatSubtitle2>Score: @score</MatSubtitle2>
            </div>
            <div class="col-md-4">
                <MatSubtitle2>Time left: @(counter < 0 ? 0 : counter)</MatSubtitle2>
            </div>
            <div class="col-md-4">
                <MatSubtitle2>Mistakes allowed: @numberOfMistakesAllowed</MatSubtitle2>
            </div>
        </div>
        <div class="row text-center mb-1">
            <div class="col-md-12">
                <MatButton Outlined="true" OnClick="@Help" Disabled="@isHelpBeingUsed">Help</MatButton>
            </div>
        </div>
    }

    @if (hasWon)
    {
        <div class="mb-3 text-center">
            <MatH6>NICE! You won! Submit your score and participate in the leaderboard?</MatH6>
            <MatButton Outlined="true" @onclick="SendScore">Submit my score</MatButton>
            <MatButton Outlined="true" @onclick="OnInitializedAsync">Start another game</MatButton>
        </div>
    }

    @if (hasLost)
    {
        <div class="row text-center">
            <MatSubtitle2 class="col-md-12">You lose! Another game maybe?</MatSubtitle2>
        </div>
    }

    @switch (game.Difficulty)
    {
        case 0:
            <div class="row col-md-6 offset-md-3">
                @foreach (Picture picture in game.Pictures)
                {
                    <MatCard @onclick="e => ShowPicture(picture)"
                             Class="col-md-3"
                             Style="border: 1px solid black; padding: 0;">
                        <MatCardContent>
                            <img class="img @(!picture.IsVisible ? "img-hidden" : "")" src="@picture.Img2Base64" />
                        </MatCardContent>
                    </MatCard>
                }
            </div>
            break;
        case 1:
            <div class="row col-md-6 offset-md-3">
                @foreach (Picture picture in game.Pictures)
                {
                    <MatCard @onclick="e => ShowPicture(picture)"
                             Class="col-md-2"
                             Style="border: 1px solid black; padding: 0;">
                        <MatCardContent>
                            <img class="img @(!picture.IsVisible ? "img-hidden" : "")"
                                 src="@picture.Img2Base64" />
                        </MatCardContent>
                    </MatCard>
                }
            </div>
            break;
        case 2:
            <div class="group col-md-6 offset-md-3">
                @foreach (Picture picture in game.Pictures)
                {
                    <MatCard @onclick="e => ShowPicture(picture)"
                         Class="col span_1_of_8"
                         Style="border: 1px solid black; padding: 0;">
                        <MatCardContent>
                            <img class="img @(!picture.IsVisible ? "img-hidden" : "")"
                                 src="@picture.Img2Base64" />
                        </MatCardContent>
                    </MatCard>
                }
            </div>
            break;
        default:
            break;
    }
}

@code {
    protected async Task SendScore()
    {
        try
        {
            var context = await tokenProvider.GetAuthenticationStateAsync();
            var userId = context.User.Claims.FirstOrDefault(c => c.Type.ToString() == "sub").Value;
            int completedInSeconds = 0;
            int mistakesMade = 0;

            switch (game.Difficulty)
            {
                case 0:
                    completedInSeconds = EASY_MODE_SECONDS - counter;
                    mistakesMade = EASY_MODE_MISTAKES_ALLOWED - numberOfMistakesAllowed;
                    break;
                case 1:
                    completedInSeconds = MEDIUM_MODE_SECONDS - counter;
                    mistakesMade = MEDIUM_MODE_MISTAKES_ALLOWED - numberOfMistakesAllowed;
                    break;
                case 2:
                    completedInSeconds = HARD_MODE_SECONDS - counter;
                    mistakesMade = HARD_MODE_MISTAKES_ALLOWED - numberOfMistakesAllowed;
                    break;
                default:
                    break;
            }

            GameScore gc = new GameScore(
                userId,
                game.CategoryId,
                game.Difficulty,
                score,
                completedInSeconds,
                mistakesMade,
                isHelpUsed);

            HttpClient client = new HttpClient();
            await client.PostJsonAsync(ApiConstants.ApiUrl + "Statistics/CreateGameScore", gc);
            await OnInitializedAsync();
        }
        catch (Exception ex)
        {
            if (ex.Message.Contains("401"))
            {
                await tokenProvider.SetTokenAsync(null);
            }
        }
    }
}
